2. Определить сложность следующих алгоритмов:
- Поиск элемента массива с известным индексом
Ответ: O(1);

- Дублирование одномерного массива через foreach
Ответ:
O(n), где n - число элементов исходного массива;

- Удаление элемента массива с известным индексом без сдвига
Ответ:
О(1);

- Удаление элемента массива с неизвестным индексом без сдвига
Ответ: не понятно, условие. Толи индекс может быть любым, толи индекс не нужен..если индекс будет указан (неизвестный),
то доступ к элементу по индексу соответственно за одну операцию O(1)

- Удаление элемента массива с неизвестным индексом со сдвигом
O(n)

3. Определить сложность следующих алгоритмов. Сколько произойдет итераций?
a)

        int n = 10000; итерация 1
        List<Integer> arrayList = new ArrayList<>(); итерация 1
        for (int i = 0; i < n; i++) { итерация n
            for (int j = 1; j < n; j *= 2) {
                arrayList.add(i * j); итерация pow(2,n)
            }
        }
        O(1+1+n*pow(2,n)) = O(n*pow(2,n)) = O(n)
b)

        int n = 10000; итерация 1
        List<Integer> arrayList = new ArrayList<>(); итерация 1
        for (int i = 0; i < n; i += 2) { итерация n/2
            for (int j = i; j < n; j++) {
                arrayList.add(i * j); итерация n
            }
        }
        O(1+1+n/2*n) = O(n*n)
с)

        int n = 10000; итерация 1
        List<Integer> arrayList = new ArrayList<>(); итерация 1
        for (int i = 0; i < n; i ++) { итерация n
            for (int j = 0; j < n; j++) {
                arrayList.add(i * j); итерация n/2
                n--; итерация n/2
            }
        }

        O (1+1+n*(n/2+n/2)) = O(n*n)
d*)
```

    factorial(BigInteger.valueOf(10000))

public static BigInteger factorial(BigInteger n) {
    if (n.equals(BigInteger.ONE)) {
        return n;
    }
    return n.multiply(factorial(n.subtract(BigInteger.valueOf(1))));
}
О(n*(n-1)!) = O(n!)


e*)
fib(BigInteger.valueOf(50));

public static BigInteger fib(BigInteger n) {
    if (n.equals(BigInteger.ONE) || n.equals(BigInteger.TWO)) {
        return n;
    }
    return fib(n.subtract(BigInteger.ONE)).add(fib(n.subtract(BigInteger.TWO)));
}
По ощущениям
O(pow(e,n))